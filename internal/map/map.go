package _map

import (
	"encoding/json"
	"os"
)

// DataMap generated by https://riskylab.com/tilemap
type DataMap struct {
	Version      float64 `json:"version"`
	Type         string  `json:"type"`
	Infinite     bool    `json:"infinite"`
	Tiledversion string  `json:"tiledversion"`
	Orientation  string  `json:"orientation"`
	Renderorder  string  `json:"renderorder"`
	Width        int     `json:"width"`
	Height       int     `json:"height"`
	TileWidth    int     `json:"tilewidth"`
	TileHeight   int     `json:"tileheight"`
	Nextlayerid  int     `json:"nextlayerid"`
	Nextobjectid int     `json:"nextobjectid"`
	Properties   []struct {
		Name  string `json:"name"`
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"properties"`
	Tilesets []struct {
		Name        string        `json:"name"`
		Firstgid    int           `json:"firstgid"`
		Tilewidth   int           `json:"tilewidth"`
		Tileheight  int           `json:"tileheight"`
		Spacing     int           `json:"spacing"`
		Margin      int           `json:"margin"`
		Columns     int           `json:"columns"`
		Tilecount   int           `json:"tilecount"`
		Image       string        `json:"image"`
		Imagewidth  int           `json:"imagewidth"`
		Imageheight int           `json:"imageheight"`
		Tiles       []interface{} `json:"tiles"`
		Properties  []interface{} `json:"properties"`
	} `json:"tilesets"`
	Layers []struct {
		Type       string        `json:"type"`
		Id         int           `json:"id"`
		Name       string        `json:"name"`
		X          int           `json:"x"`
		Y          int           `json:"y"`
		Width      int           `json:"width"`
		Height     int           `json:"height"`
		Visible    bool          `json:"visible"`
		Opacity    int           `json:"opacity"`
		Offsetx    int           `json:"offsetx"`
		Offsety    int           `json:"offsety"`
		Data       []int         `json:"data"`
		Properties []interface{} `json:"properties"`
	} `json:"layers"`
}
type Map struct {
	Data *DataMap
}

func NewMap(path string) (*Map, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var data DataMap
	jsonParser := json.NewDecoder(file)
	if err = jsonParser.Decode(&data); err != nil {
		return nil, err
	}

	return &Map{Data: &data}, nil
}
